# 190721

## 자바는?
- 기업용 시장의 강자
- 자바는 안드로이드 앱 개발에 사용됨



## 자바의 작동 순서
- 운영체제(윈도우.리눅스.OSX) 안에 자바가 있음
- 자바 안에 내가 적은 소스코드가 있음

- 소스코드를 자바에 제공하면
- 자바는 적힌대로 프로그램을 실행하면서 운영체제의 자원을 이용
- 운영체제는 하드웨어의 자원을 사용



> JVM : 어떤 운영체제이든 자바를 실행할 수 있게 도와줌



## 소스파일과 실행파일의 구분

### 소스파일
- .java로 끝나고 src폴더에 저장됨
- src는 cource의 준말
- 저장하면 자동으로 컴파일이 일어남(binary 파일이 생성됨)



### 실행파일
- .class로 끝나고 bin폴더에 저장됨
- bin은 binary의 준말
- 소스파일을 컴파일한 결과로 생성됨
- 가상머신에 전달했을 때 실행되는 파일



### 숫자와 문자
- 정수 : 소수점이 붙지 않는 숫자
- 실수 : 소수점이 붙는 숫자

- 문자 : 한 글자. 작은따옴표로 표시 (ex. '생')
- 문자열 : 문자 한 개 이상. 큰따옴표로 표시 (ex. "생활코딩")
- 한 글자는 문자면서 문자열도 될 수 있다.



### 코딩 스킬

#### 큰따옴표를 결과창에 출력하려면?
- 앞에 역슬래쉬(\)를 넣어준다!

	System.out.println("She said, \"Hey guys, good day!\" and grinned.");

#### 줄바꿈
- \n을 사용

	System.out.println("blah \n blah blah");




## 변수
> 변할 수 있는 데이터
> 대명사(그, 그것, 그곳) 같은 것



### 변수 만들기 = 변수 선언하기
> 자료형 변수이름;

	int a;

- int : 데이터형식이 숫자(중에서도 정수)라는 것을 알림
- a : 변수 이름



### 변수에 값 넣기 = 값 할당하기 = 값 대입하기
> 변수이름 = 값;

	a = 1;



### 정수와 실수
> 자바는 엄격한 언어라 정수와 실수를 구분함
> 정수는 정수 변수에, 실수는 실수 변수에 넣을 수 있음

	double a;
	a = 1.1;	// 오류 없음

- double : 데이터형식이 실수

	double a;
	a = 1;	// 오류 있음



### 변수의 선언과 값 할당을 한 번에
> 한 줄에 할 수 있음
> 항상 효율적인 것은 아님. 가독성이 떨어질 수도 있음

	String a = "Java"



## 주석

### 한 줄 주석

	// line comment

### 여러 줄 주석

	/* 
	여러 줄 주석
	두번째 줄
	*/

### JavaDoc 주석
- 자바 문서 만들기에 사용

	/**
	*
	*/



#### 세미콜론
- 문장의 끝을 의미



## 데이터타입

### 정수형
- byte : 1 byte
- short : 2 byte
- int : 4 byte
- long : 8 byte

#### 왜 귀찮게 타입이 나뉨? 그냥 long을 사용하면 안 될까?
- 큰 정수형은 큰 메모리 용량을 사용하기 때문 (일종의 예약제)
- 얼마나 큰 수를 담든 같은 정수형은 같은 메모리 용량을 사용

	long a = 1;
	long b = 212324834;

> 위의 두 문장은 같은 메모리 용량을 사용



### 실수형

- float : 4 byte
- double : 8 byte
- 실수를 사용할 때는 보통 double을 사용



### 문자
- 영어 : 한 글자마자 2byte 사용
- 한글 : 한 글자마다 3byte 사용



## 상수
> 변하지 않는 값
- 상수도 데이터타입이 있음
- 정수는 기본적으로 int, 실수는 기본적으로 double
- byte, short에는 int타입의 상수를 넣는 것이 허용됨

### 상수를 float타입에 대입하는 법
> 상수 뒤에 F를 붙임 

	float a = 2.2F;

### 상수를 long타입에 대입하는 법
> 상수 뒤에 L을 붙임

	long b = 20000L;



## 형변환(Type conversion)

### 자동 형변환(=암시적 형변환, implict conversion)
- 작은 자료형에서 큰 자료형으로 자동 변환됨 (ex. float < double)
- 타입을 변경해도 정보의 손실이 일어나지 않는 경우 자동 변환됨

> 아래 예제는 오류가 없음

	double a = 2.2F;

- 자동 형변환에서 정수 < 실수. 표현범위가 더 넓기 때문

> 아래 예제는 오류가 없음

	double a = 1;



### 자동 형변환2
- 자료형이 다른 수끼리 계산할 때 일어남
- 작은 자료형에서 큰 자료형으로 자동 변환됨



### 명시적 형변환(Explict conversion)
- 수동으로 형변환하는 법

>아래 예제는 오류가 없음

float a = (float)100.0;

> 아래 예제는 오류가 없고, 0.1이 손실됨

	int b = (int)100.1F;



## 연산자

### 단항연산자

#### ++
- 순서가 중요
- ++i는 문장을 실행하기 전에 +1
- i++는 문장을 실행한 후에 +1