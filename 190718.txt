#190718

## 객체 지향 프로그래밍
- 객체를 만들고 그걸 조립해서 프로그램으로 만드는 기법



### 객체란?
- 속성(필드)과 동작(메소드=함수)으로 구성됨

	이혜민은 사람이라는 속성을 가지고 밥을 먹는다는 동작을 함

- 객체 모델링 : 현실 세계의 객체를 소프트웨어 객체로 설계



### 메소드 호출
- 객체가 다른 객체의 기능을 이용

	사람이 전자계산기의 더하기 빼기 기능을 이용



### 매개변수(패러미터)



### 객체 간의 관계
1. 집합 관계
- 부품과 완성품의 관계

2. 사용 관계
- 객체 간의 상호작용

3. 상속 관계
- 부모 객체와 자식 객체



### 클래스
- 자바의 설계도



### 생성자
- 생성자 이름은 클래스 이름과 똑같음
- 새 객체를 만듦
- 옵션으로 패러미터를 넣을 수 있음



#### 클래스를 만들면 일어나는 일
- 메모리 공간 안에 데이터가 들어갈 수 있는 3개 영역이 만들어짐(인스턴스와)
1. 메서드영역
2. 힙영역
- 객체 저장
3. 스택영역
- 메인 함수의 변수
- 객체 참조 변수


### 자바의 다형성
- 같은 이름의 메소드를 여러 개 만들 수 있음(오버로딩 할 수 있음)
- 같은 이름의 메소드는 패러미터의 개수, 리턴값의 타입 등으로 구분함

	public Student() {
		System.out.println("기본 생성자 호출");
	}
	
	public Student(String p_name) {
		name = p_name;
		System.out.println("이름을 가진 생성자 호출");
	}



#### 오버로딩
- 같은 이름의 클래스를 재정의하는 것



#### ★객체참조란?



### 접근제어자
public : 접근 ㅇㅋ
private : 외부 액세스 차단